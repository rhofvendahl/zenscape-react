{"version":3,"sources":["components/Stripe.js","constants.js","components/Controls.js","components/Face.js","components/Box.js","components/Scape.js","components/ScapeManager.js","components/App.js","index.js"],"names":["Stripe","toggleControls","className","onClick","INIT_VALUES","CONTROLS_LIMITS","MIN","MAX","SCAPE_PALLETES","WATER","light","medium","dark","SAND","FOLIAGE","ROCK","SNOW","BASE","Controls","handlers","values","reset","onChange","onSizeChange","value","size","step","min","LIMITS","max","onHeightChange","height","onWidthChange","width","onSpeedChange","speed","Face","translate","rotate","backgroundColor","borderRadius","transform","x","y","z","style","marginLeft","marginTop","Box","boxName","handleClick","pallete","dimensions","coordinates","roundCorners","borderRadiusValue","onMouseDown","backTopLeft","backTopRight","frontBottomRight","frontBottomLeft","Scape","scapeMap","cellSize","cells","length","push","PALLETES","top","ScapeManager","xCells","zCells","clickMemory","updateInterval","waveValues","useState","Date","now","clickLog","setClickLog","Array","fill","map","setScapeMap","updateScapeMap","useCallback","newScapeMap","i","click","seconds","distance","Math","pow","distanceFromPeak","abs","PI","cos","updateScapeMapRef","useRef","useEffect","current","updateTimer","setInterval","clearInterval","parseInt","split","concat","App","setXCells","setZCells","setCellSize","waveHeight","setWaveHeight","waveWidth","setWaveWidth","waveSpeed","setWaveSpeed","controlsHidden","setControlsHidden","controlsRemoved","setControlsRemoved","controlsHiddenRef","prevControlsHidden","setTimeout","toggleControlsRef","controlsHandlers","newXCellsFloat","round","newHeight","newWidth","newSpeed","getControlsClassName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6b1298d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Stripe.css\";\n\nconst Stripe = ({toggleControls}) => {\n  return (\n    <div className=\"stripe\">\n      <div className=\"stripe-contents\">  \n        <div className=\"stripe-logo\">ZS</div>\n        <button\n          className=\"controls-toggle\"\n          onClick={() => toggleControls()}\n        >[controls]</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Stripe;","const INIT_VALUES = {\n  X_CELLS: 20,\n  Z_CELLS: 20,\n  CELL_SIZE: 20,\n  CLICK_MEMORY: 5,\n  UPDATE_INTERVAL: 100,\n  WAVE_HEIGHT: 1,\n  WAVE_WIDTH: 1,\n  WAVE_SPEED: 1,\n};\n\nconst CONTROLS_LIMITS = {\n  SIZE: {\n    MIN: 10,\n    MAX: 40,\n  },\n  HEIGHT: {\n    MIN: .25,\n    MAX: 2,\n  },\n  WIDTH: {\n    MIN: .5,\n    MAX: 2,\n  },\n  SPEED: {\n    MIN: .1,\n    MAX: 10,\n  },\n}\n\nconst SCAPE_PALLETES = {\n  WATER: {\n    light: \"#4081F2\",\n    medium: \"#346dC7\",\n    dark: \"#275799\",\n  },\n  SAND: {\n    light: \"#FFF089\",\n    medium: \"#C1B367\",\n    dark: \"#817847\",\n  },\n  FOLIAGE: {\n    light: \"#2AA330\",\n    medium: \"#1F8C28\",\n    dark: \"#106E1F\",\n  },\n  ROCK: {\n    light: \"#BEBEBE\",\n    medium: \"#8E8E8E\",\n    dark: \"#606060\",\n  },\n  SNOW: {\n    light: \"#FFFFFF\",\n    medium: \"#BEBEBE\",\n    dark: \"#7F7F7F\",\n  },\n  BASE: {\n    light: \"#9D9D9D\",\n    medium: \"#7F7F7F\",\n    dark: \"#4E4E4E\",\n  },\n};\n\nexport { INIT_VALUES, CONTROLS_LIMITS, SCAPE_PALLETES };","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport 'rc-slider/assets/index.css';\nimport { CONTROLS_LIMITS as LIMITS } from \"../constants\"\nimport \"./Controls.css\";\n\nconst Controls = ({ className, handlers, values, reset }) => {\n  return (\n    <div\n      className={className}\n    >\n      <div className=\"controls-contents\">\n        <div className=\"control control-size\">\n          <div className=\"control-label\">size</div>\n          <Slider\n            onChange={handlers.onSizeChange}\n            value={values.size}\n            step={.01}\n            min={LIMITS.SIZE.MIN}\n            max={LIMITS.SIZE.MAX}\n          />\n        </div>\n        <div className=\"control control-height\">\n          <div className=\"control-label\">height</div>\n          <Slider\n            onChange={handlers.onHeightChange}\n            value={values.height}\n            step={.01}\n            min={LIMITS.HEIGHT.MIN}\n            max={LIMITS.HEIGHT.MAX}\n          />\n        </div>\n        <div className=\"control control-width\">\n          <div className=\"control-label\">width</div>\n          <Slider\n            onChange={handlers.onWidthChange}\n            value={values.width}\n            step={.01}\n            min={LIMITS.WIDTH.MIN}\n            max={LIMITS.WIDTH.MAX}\n          />\n        </div>\n        <div className=\"control control-speed\">\n          <div className=\"control-label\">speed</div>\n          <Slider\n            onChange={handlers.onSpeedChange}\n            value={values.speed}\n            step={.01}\n            min={LIMITS.SPEED.MIN}\n            max={LIMITS.SPEED.MAX}\n          />\n        </div>\n        <div className=\"controls-reset\"\n          onClick={()=>reset()}\n        >\n          [reset]\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","// Constructs a box face.\nconst Face = ({translate, rotate, width, height, backgroundColor, borderRadius}) => {\n  const transform = `translate3d(${translate.x}px, ${translate.y}px, ${translate.z}px)`\n    + ` rotateX(${rotate.x}deg) rotateY(${rotate.y}deg) rotateZ(${rotate.z}deg)`;\n\n  return (\n    <div\n      className=\"face object\"\n      style={{\n        width,\n        height,\n        marginLeft: -width/2,\n        marginTop: -height/2,\n        transform,\n        backgroundColor,\n        borderRadius,\n      }}\n    ></div>\n  );\n};\n\nexport default Face;","import Face from \"./Face\";\n\n// Constructs a box object.\nconst Box = ({boxName, handleClick, pallete, dimensions, coordinates, roundCorners}) => {\n  const borderRadiusValue = dimensions.y / 8 + \"px\";\n  return (\n    <div\n      className={`${boxName} box object`}\n      onMouseDown={handleClick}\n    >\n      {/* Top */}\n      <Face\n        backgroundColor={pallete.light}\n        width={dimensions.x}\n        height={dimensions.z}\n        translate={{ x: (coordinates.x + dimensions.x / 2), y: -(coordinates.y + dimensions.y), z: (coordinates.z + dimensions.z / 2) }}\n        rotate={{ x: 90, y: 0, z: 0 }}\n        borderRadius={`${roundCorners.backTopLeft ? borderRadiusValue : \"0\"} ${roundCorners.backTopRight ? borderRadiusValue : \"0\"} 0 0`}\n      />\n\n      {/* Front */}\n      <Face\n        backgroundColor={pallete.medium}\n        width={dimensions.x}\n        height={dimensions.y}\n        translate={{ x: (coordinates.x + dimensions.x / 2), y: -(coordinates.y + dimensions.y / 2), z: (coordinates.z + dimensions.z) }}\n        rotate={{ x: 0, y: 0, z: 0 }}\n        borderRadius={`0 0 ${roundCorners.frontBottomRight ? borderRadiusValue : \"0\"} ${roundCorners.frontBottomLeft ? borderRadiusValue : \"0\"}`}\n      />\n    </div>\n  );\n};\n\nexport default Box;","import React from \"react\";\nimport { SCAPE_PALLETES as PALLETES } from \"../constants.js\";\nimport Box from \"./Box\";\n\nconst getPallete = (height) => {\n  const snowLine = 3;\n  if (height <= .2 * snowLine) {\n    return PALLETES.WATER\n  } else if (height <= .3 * snowLine) {\n    return PALLETES.SAND\n  } else if (height <= .6 * snowLine) {\n    return PALLETES.FOLIAGE\n  } else if (height <= snowLine) {\n    return PALLETES.ROCK\n  } else {\n    return PALLETES.SNOW\n  };\n};\n\n// Responsible for rendering landscape.\nconst Scape = ({scapeMap, cellSize, handleClick}) => { \n  const cells = [];\n  for (let x = 0; x < scapeMap.length; x++) {\n    for (let z = 0; z < scapeMap[0].length; z++) {\n      const boxName = x + \"-\" + z;\n      const roundCorners = {\n        backTopLeft: (x == 0 && z == 0) || scapeMap[x][z],\n        backTopRight: (x == scapeMap.length - 1 && z == 0) || scapeMap[x][z],\n        frontBottomLeft: (x == 0 && z == scapeMap[0].length - 1) || scapeMap[x][z],\n        frontBottomRight: (x == scapeMap.length - 1 && z == scapeMap[0].length - 1) || scapeMap[x][z],\n      };\n      cells.push(<Box\n        key={boxName}\n        boxName={boxName}\n        dimensions={{\n          x: cellSize,\n          y: cellSize,\n          z: cellSize,\n        }}\n        coordinates={{\n          x: x * cellSize,\n          y: scapeMap[x][z] * cellSize,\n          z: z * cellSize,\n        }}\n        handleClick={() => handleClick(boxName)}\n        pallete={getPallete(scapeMap[x][z])}\n        roundCorners={roundCorners}\n      />);\n    }\n  }\n\n  return (\n    <div\n      className=\"scape object\"\n      style={{\n        marginLeft: (-scapeMap.length * cellSize / 2) + \"px\",\n        marginTop: (-scapeMap[0].length * cellSize / 2) + \"px\",\n        transform: \"rotateX(-30deg)\",\n        top: \"50%\",\n      }}\n    >\n      {cells}\n      <Box\n        className=\"base\"\n        dimensions={{\n          x: scapeMap.length * cellSize,\n          y: cellSize,\n          z: scapeMap[0].length * cellSize,\n        }}\n        coordinates={{\n          x: 0,\n          y: -cellSize * 1.5,\n          z: 0,\n        }}\n        pallete={PALLETES.BASE}\n        roundCorners={{\n            backTopLeft: true,\n            backTopRight: true,\n            frontBottomLeft: true,\n            frontBottomRight: true,    \n        }}\n      />\n    </div>\n  );\n};\n\nexport default Scape;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Scape from \"./Scape\";\nimport \"./ScapeManager.css\";\n\n// Responsible for landscape interactivity.\nconst ScapeManager = ({xCells, zCells, cellSize, clickMemory, updateInterval, waveValues}) => {\n  const [clickLog, setClickLog] = useState([\n    [5, 6, Date.now()],\n    [5, 6, Date.now()],\n    [14, 14, Date.now() + 500],\n    [16, 4, Date.now() + 1000],\n  ]);\n\n  const [scapeMap, setScapeMap] = useState(\n    new Array(xCells).fill(0).map(() => new Array(zCells).fill(0))\n  );\n\n  const handleClick = (boxName) => {\n    const click = [\n      parseInt(boxName.split(\"-\")[0]),\n      parseInt(boxName.split(\"-\")[1]),\n      Date.now(),\n    ];\n    setClickLog(clickLog.concat([click]));\n  }\n\n  // Calculates the desired height for each cell.\n  // Each cell is calculated individually, based on its distance from the locations of recent clicks.\n  // useCallback is used to return a memoized function, as updateScapeMap would otherwise re-calculate each render cycle.\n  const updateScapeMap = useCallback(() => {\n    const newScapeMap = new Array(xCells).fill(0).map(() => new Array(zCells).fill(0));\n    for (let x = 0; x < newScapeMap.length; x++) {\n      for (let z = 0; z < newScapeMap[0].length; z++) {\n\n        // For each click, add to the current cell's height.\n        for (let i = 0; (i < clickMemory) && (i < clickLog.length); i++) {\n          const click = clickLog[clickLog.length - 1 - i];\n          const seconds = (Date.now() - click[2]) / 1000;\n          const distance = Math.pow((Math.pow(x - click[0], 2) + Math.pow(z - click[1], 2)), 1 / 2);\n\n          // If the current click is both close enough and recent enough, add an amount to the cell's height\n          // corresponding to its position on a 2D cosine curve which started out centered on the clicked\n          // cell and has since moved toward (and past) the current cell.\n          const distanceFromPeak = Math.abs(distance / 2 - (seconds * waveValues.speed)) / waveValues.width;\n          if (distanceFromPeak < Math.PI) {\n            newScapeMap[x][z] += (Math.cos(distanceFromPeak) + 1) / 2 * waveValues.height;\n          }\n        };\n      };\n    };\n    setScapeMap(newScapeMap);\n  }, [clickMemory, clickLog, xCells, zCells, waveValues]);\n\n  // Create a reference to updateScapeMap that can be used within setInterval.\n  const updateScapeMapRef = useRef(updateScapeMap);\n\n  // Update this reference each time updateScapeMap or changes.\n  useEffect(() => {\n    updateScapeMapRef.current = updateScapeMap;\n  }, [updateScapeMap, xCells, zCells]);\n\n  // Create an update loop at the start of this component's lifecycle.\n  useEffect(() => {\n    const updateTimer = setInterval(() => {\n      updateScapeMapRef.current();\n    }, updateInterval);\n    return () => {\n      clearInterval(updateTimer);\n    };\n  }, [updateInterval]);\n\n\n  return (\n    <div className=\"scape-manager\" >\n      <Scape\n        cellSize={cellSize}\n        handleClick={(boxName) => handleClick(boxName)}\n        scapeMap={scapeMap}\n      />\n    </div>\n  );\n};\n\nexport default ScapeManager;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Stripe from \"./Stripe\";\nimport Controls from \"./Controls\";\nimport ScapeManager from \"./ScapeManager\";\nimport { INIT_VALUES } from \"../constants\"\nimport \"./App.css\";\n\n// Manages interactions between landscape and controls\nconst App = () => {\n  const [xCells, setXCells] = useState(INIT_VALUES.X_CELLS);\n  const [zCells, setZCells] = useState(INIT_VALUES.Z_CELLS);\n  const [cellSize, setCellSize] = useState(INIT_VALUES.CELL_SIZE);\n  const [waveHeight, setWaveHeight] = useState(INIT_VALUES.WAVE_HEIGHT);\n  const [waveWidth, setWaveWidth] = useState(INIT_VALUES.WAVE_WIDTH);\n  const [waveSpeed, setWaveSpeed] = useState(INIT_VALUES.WAVE_SPEED);\n  const [controlsHidden, setControlsHidden] = useState(null);\n  // Indicates whether controls \"visibility\" is set to \"none\" (occurs at end of \"hide\" animation)\n  const [controlsRemoved, setControlsRemoved] = useState(false);\n\n\n  // Ensures timeout has current value for controlsHidden\n  const controlsHiddenRef = useRef(controlsHidden);\n  useEffect(() => {\n    controlsHiddenRef.current = controlsHidden;\n  }, [controlsHidden]);\n\n  const toggleControls = useCallback(() => {\n    let prevControlsHidden = controlsHidden;\n    // Sets to true if either false (visible) or null (initial state)\n    setControlsHidden(!prevControlsHidden);\n    if (prevControlsHidden) {\n      setControlsRemoved(false);\n    }\n    else {\n      setTimeout(() => {\n        if (controlsHiddenRef.current) {\n          setControlsRemoved(true);\n        }\n      }, 1000);  \n    }\n  }, [controlsHidden]);\n\n  const getControlsClassName = () => {\n    let className = \"controls\";\n    if (controlsRemoved) {\n      return className + \" controls-removed\";\n    } else if (controlsHidden == null) {\n      return className + \" controls-initial\";\n    } else if (controlsHidden) {\n      return className + \" controls-hidden\";\n    } else {\n      return className;\n    }\n  };\n\n  // Ensures timeout has current value for toggleControls\n  const toggleControlsRef = useRef(toggleControls);\n  useEffect(() => {\n    toggleControlsRef.current = toggleControls;\n  }, [toggleControls]);  \n\n  // Hides controls 2seconds after start of session (if they havne't already been hidden)\n  useEffect(() => {\n    setTimeout(() => {\n      if (controlsHiddenRef.current == null) {\n        toggleControlsRef.current();\n      }\n    }, 2000);\n  }, []);\n\n  const resetControls = () => {\n    setXCells(INIT_VALUES.X_CELLS);\n    setZCells(INIT_VALUES.Z_CELLS);\n    setCellSize(INIT_VALUES.CELL_SIZE);\n    setWaveHeight(INIT_VALUES.WAVE_HEIGHT);\n    setWaveWidth(INIT_VALUES.WAVE_WIDTH);\n    setWaveSpeed(INIT_VALUES.WAVE_SPEED);\n  };\n\n  const controlsHandlers = {\n    onSizeChange: (newXCellsFloat) => {\n      setCellSize(Math.round(400 / newXCellsFloat));\n      setXCells(Math.round(newXCellsFloat));\n      setZCells(Math.round(newXCellsFloat));\n    },\n    onHeightChange: (newHeight) => {\n      setWaveHeight(newHeight);\n    },\n    onWidthChange: (newWidth) => {\n      setWaveWidth(newWidth);\n    },\n    onSpeedChange: (newSpeed) => {\n      setWaveSpeed(newSpeed);\n    },\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"viewport\">\n        <Stripe\n          toggleControls={toggleControls}\n        />\n        <ScapeManager\n          xCells={xCells}\n          zCells={zCells}\n          cellSize={cellSize}\n          clickMemory={INIT_VALUES.CLICK_MEMORY}\n          updateInterval={INIT_VALUES.UPDATE_INTERVAL}\n          waveValues={{\n            height: waveHeight,\n            width: waveWidth,\n            speed: waveSpeed,\n          }}\n        />\n        <div className=\"guide-wrapper\">\n          <div className=\"guide\">^ click scape ^</div>\n        </div>\n      </div>\n      <Controls\n        className={getControlsClassName()}\n        handlers={controlsHandlers}\n        values={{\n          size: xCells,\n          height: waveHeight,\n          width: waveWidth,\n          speed: waveSpeed,\n        }}\n        reset={resetControls}\n      />\n    </div>\n  );\n};\n\nexport default App;","import ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render((\n  <App />\n), document.getElementById(\"root\"));\n\n"],"sourceRoot":""}