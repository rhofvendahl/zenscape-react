{"version":3,"sources":["Background.js","Face.js","Box.js","Scape.js","ScapeManager.js","index.js"],"names":["Background","props","className","Face","transformString","translate","x","y","z","rotate","shade","style","width","height","marginLeft","marginTop","transform","backgroundColor","color","Box","boxName","onClick","handleClick","pallete","light","dimensions","coordinates","medium","PALLETES","WATER","dark","SAND","FOLIAGE","ROCK","SNOW","BASE","Scape","cells","scapeMap","length","push","cellSize","INIT","ScapeManager","useState","Date","now","clickLog","setClickLog","Array","fill","map","setScapeMap","updateScapeMap","useCallback","newScapeMap","i","click","seconds","distance","Math","pow","abs","PI","cos","updateScapeMapRef","useRef","useEffect","current","updateTimer","setInterval","clearInterval","parseInt","split","concat","ReactDOM","render","Fragment","document","getElementById"],"mappings":"8LAUeA,EATI,SAACC,GAClB,OACE,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,OAAf,gBACA,qBAAKA,UAAU,QAAf,yB,OCeSC,EAlBF,SAACF,GACZ,IAAMG,EAAkB,sBAAeH,EAAMI,UAAUC,EAA/B,eAAuCL,EAAMI,UAAUE,EAAvD,eAA+DN,EAAMI,UAAUG,EAA/E,0BACRP,EAAMQ,OAAOH,EADL,wBACsBL,EAAMQ,OAAOF,EADnC,wBACoDN,EAAMQ,OAAOD,EADjE,QAExB,OACE,qBACEN,UAAS,UAAKD,EAAMS,MAAX,gBACTC,MAAO,CACLC,MAAOX,EAAMW,MACbC,OAAQZ,EAAMY,OACdC,YAAab,EAAMW,MAAQ,EAC3BG,WAAYd,EAAMY,OAAS,EAC3BG,UAAWZ,EACXa,gBAAiBhB,EAAMiB,UCiBhBC,EA3BH,SAAClB,GACX,OACE,sBACEC,UAAS,UAAKD,EAAMmB,QAAX,eACTC,QAASpB,EAAMqB,YAFjB,UAKE,cAAC,EAAD,CACEJ,MAAOjB,EAAMsB,QAAQC,MACrBZ,MAAOX,EAAMwB,WAAWnB,EACxBO,OAAQZ,EAAMwB,WAAWjB,EACzBH,UAAW,CAAEC,EAAIL,EAAMyB,YAAYpB,EAAIL,EAAMwB,WAAWnB,EAAI,EAAIC,IAAKN,EAAMyB,YAAYnB,EAAIN,EAAMwB,WAAWlB,GAAIC,EAAIP,EAAMyB,YAAYlB,EAAIP,EAAMwB,WAAWjB,EAAI,GAC/JC,OAAQ,CAAEH,EAAG,GAAIC,EAAG,EAAGC,EAAG,KAI5B,cAAC,EAAD,CACEU,MAAOjB,EAAMsB,QAAQI,OACrBf,MAAOX,EAAMwB,WAAWnB,EACxBO,OAAQZ,EAAMwB,WAAWlB,EACzBF,UAAW,CAAEC,EAAIL,EAAMyB,YAAYpB,EAAIL,EAAMwB,WAAWnB,EAAI,EAAIC,IAAKN,EAAMyB,YAAYnB,EAAIN,EAAMwB,WAAWlB,EAAI,GAAIC,EAAIP,EAAMyB,YAAYlB,EAAIP,EAAMwB,WAAWjB,GAC/JC,OAAQ,CAAEH,EAAG,EAAGC,EAAG,EAAGC,EAAG,SCtB3BoB,EAAW,CACfC,MAAO,CACLL,MAAO,UACPG,OAAQ,UACRG,KAAM,WAERC,KAAM,CACJP,MAAO,UACPG,OAAQ,UACRG,KAAM,WAERE,QAAS,CACPR,MAAO,UACPG,OAAQ,UACRG,KAAM,WAERG,KAAM,CACJT,MAAO,UACPG,OAAQ,UACRG,KAAM,WAERI,KAAM,CACJV,MAAO,UACPG,OAAQ,UACRG,KAAM,WAERK,KAAM,CACJX,MAAO,UACPG,OAAQ,UACRG,KAAM,YAoBV,IAoDeM,EApDD,SAACnC,GAEb,IADA,IAAMoC,EAAQ,GACL/B,EAAI,EAAGA,EAAIL,EAAMqC,SAASC,OAAQjC,IACzC,IAD+C,IAAD,WACrCE,GACP,IApBcK,EAoBRO,EAAUd,EAAI,IAAME,EAC1B6B,EAAMG,KAAK,cAAC,EAAD,CAETpB,QAASA,EACTK,WAAY,CACVnB,EAAGL,EAAMwC,SACTlC,EAAGN,EAAMwC,SACTjC,EAAGP,EAAMwC,UAEXf,YAAa,CACXpB,EAAGA,EAAIL,EAAMwC,SACblC,EAAGN,EAAMqC,SAAShC,GAAGE,GAAKP,EAAMwC,SAChCjC,EAAGA,EAAIP,EAAMwC,UAEfnB,YAAa,kBAAMrB,EAAMqB,YAAYF,IACrCG,SAnCYV,EAmCQZ,EAAMqC,SAAShC,GAAGE,GAjCxCK,GAAU,GADG,EAERe,EAASC,MACPhB,GAAU,GAHJ,EAIRe,EAASG,KACPlB,GAAU,GALJ,EAMRe,EAASI,QACPnB,GAPM,EAQRe,EAASK,KAETL,EAASM,OAWPd,KAHAZ,EAAI,EAAGA,EAAIP,EAAMqC,SAAS,GAAGC,OAAQ/B,IAAM,EAA3CA,GAqBX,OACE,sBACEN,UAAU,eACVS,MAAO,CACLG,YAAcb,EAAMqC,SAASC,OAAStC,EAAMwC,SAAW,EAAK,KAC5D1B,WAAad,EAAMqC,SAAS,GAAGC,OAAStC,EAAMwC,SAAW,EAAK,KAC9DzB,UAAW,mBALf,UAQGqB,EACD,cAAC,EAAD,CACEnC,UAAU,OACVuB,WAAY,CACVnB,EAAGL,EAAMqC,SAASC,OAAStC,EAAMwC,SACjClC,EAAGN,EAAMwC,SACTjC,EAAGP,EAAMqC,SAAS,GAAGC,OAAStC,EAAMwC,UAEtCf,YAAa,CACXpB,EAAG,EACHC,EAAqB,KAAjBN,EAAMwC,SACVjC,EAAG,GAELe,QAASK,EAASO,WC/FpBO,EACK,GADLA,EAEK,GAFLA,EAGO,GAHPA,EAIU,EAJVA,EAKa,IA+EJC,EA3EM,SAAC1C,GAAW,IAAD,EACE2C,mBAAS,CACvC,CAAC,EAAG,EAAGC,KAAKC,OACZ,CAAC,EAAG,EAAGD,KAAKC,OACZ,CAAC,GAAI,GAAID,KAAKC,MAAQ,KACtB,CAAC,GAAI,EAAGD,KAAKC,MAAQ,OALO,mBACvBC,EADuB,KACbC,EADa,OAQEJ,mBAC9B,IAAIK,MAAMP,GAAcQ,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMP,GAAcQ,KAAK,OAT3C,mBAQvBZ,EARuB,KAQbc,EARa,KAwBxBC,EAAiBC,uBAAY,WAEjC,IADA,IAAMC,EAAc,IAAIN,MAAMP,GAAcQ,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMP,GAAcQ,KAAK,MAClF5C,EAAI,EAAGA,EAAIiD,EAAYhB,OAAQjC,IACtC,IAAK,IAAIE,EAAI,EAAGA,EAAI+C,EAAY,GAAGhB,OAAQ/B,IAGzC,IAAK,IAAIgD,EAAI,EAAIA,EAAId,GAAuBc,EAAIT,EAASR,OAASiB,IAAK,CACrE,IAAMC,EAAQV,EAASA,EAASR,OAAS,EAAIiB,GACvCE,GAAWb,KAAKC,MAAQW,EAAM,IAAM,IACpCE,EAAWC,KAAKC,IAAKD,KAAKC,IAAIvD,EAAImD,EAAM,GAAI,GAAKG,KAAKC,IAAIrD,EAAIiD,EAAM,GAAI,GAAK,IAK/EG,KAAKE,IAAIH,EAAW,EAAID,GAAWE,KAAKG,KAC1CR,EAAYjD,GAAGE,KAAOoD,KAAKI,IAAIL,EAAW,EAAID,GAAW,GAAK,GAKtEN,EAAYG,KACX,CAACR,IAIEkB,EAAoBC,iBAAOb,GAiBjC,OAdAc,qBAAU,WACRF,EAAkBG,QAAUf,IAC3B,CAACA,IAGJc,qBAAU,WACR,IAAME,EAAcC,aAAY,WAC9BL,EAAkBG,YACjB1B,GACH,OAAO,WACL6B,cAAcF,MAEf,IAGD,cAAC,EAAD,CACE5B,SAAUC,EACVpB,YAAa,SAACF,GAAD,OAzDG,SAACA,GACnB,IAAMqC,EAAQ,CACZe,SAASpD,EAAQqD,MAAM,KAAK,IAC5BD,SAASpD,EAAQqD,MAAM,KAAK,IAC5B5B,KAAKC,OAEPE,EAAYD,EAAS2B,OAAO,CAACjB,KAmDDnC,CAAYF,IACtCkB,SAAUA,K,MC5EhBqC,IAASC,OACP,eAAC,IAAMC,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IAFF,OAICC,SAASC,eAAe,W","file":"static/js/main.63c3565e.chunk.js","sourcesContent":["// Renders background.\nconst Background = (props) => {\n  return (\n    <div className=\"stripe\">\n      <div className=\"logo\">ZS</div>\n      <div className=\"guide\">[click]</div>\n    </div>\n  )\n}\n\nexport default Background;","\n// Constructs a box face.\nconst Face = (props) => {\n  const transformString = `translate3d(${props.translate.x}px, ${props.translate.y}px, ${props.translate.z}px)`\n    + ` rotateX(${props.rotate.x}deg) rotateY(${props.rotate.y}deg) rotateZ(${props.rotate.z}deg)`;\n  return (\n    <div\n      className={`${props.shade} face object`}\n      style={{\n        width: props.width,\n        height: props.height,\n        marginLeft: -props.width / 2,\n        marginTop: -props.height / 2,\n        transform: transformString,\n        backgroundColor: props.color,\n      }}\n    ></div>\n  )\n}\n\nexport default Face;","import Face from \"./Face\";\n\n// Constructs a box object.\n// Some faces commented to reduce latency.\nconst Box = (props) => {\n  return (\n    <div\n      className={`${props.boxName} box object`}\n      onClick={props.handleClick}\n    >\n      {/* orthogonal to y axis (y points down) */}\n      <Face\n        color={props.pallete.light}\n        width={props.dimensions.x}\n        height={props.dimensions.z}\n        translate={{ x: (props.coordinates.x + props.dimensions.x / 2), y: -(props.coordinates.y + props.dimensions.y), z: (props.coordinates.z + props.dimensions.z / 2) }}\n        rotate={{ x: 90, y: 0, z: 0 }}\n      />\n\n      {/* orthogonal to z axis (z points out at screen) */}\n      <Face\n        color={props.pallete.medium}\n        width={props.dimensions.x}\n        height={props.dimensions.y}\n        translate={{ x: (props.coordinates.x + props.dimensions.x / 2), y: -(props.coordinates.y + props.dimensions.y / 2), z: (props.coordinates.z + props.dimensions.z) }}\n        rotate={{ x: 0, y: 0, z: 0 }}\n      />\n    </div>\n  )\n}\n\nexport default Box;","import React from \"react\";\nimport Box from \"./Box\";\n\nconst PALLETES = {\n  WATER: {\n    light: \"#4081f2\",\n    medium: \"#346dc7\",\n    dark: \"#275799\",\n  },\n  SAND: {\n    light: \"#FFF089\",\n    medium: \"#C1B367\",\n    dark: \"#817847\",\n  },\n  FOLIAGE: {\n    light: \"#2aa330\",\n    medium: \"#1f8c28\",\n    dark: \"#106e1f\",\n  },\n  ROCK: {\n    light: \"#BEBEBE\",\n    medium: \"#8E8E8E\",\n    dark: \"#606060\",\n  },\n  SNOW: {\n    light: \"#FFFFFF\",\n    medium: \"#BEBEBE\",\n    dark: \"#7F7F7F\",\n  },\n  BASE: {\n    light: \"#9e9c9c\",\n    medium: \"#807f7e\",\n    dark: \"#4f4e4e\",\n  },\n};\n\nfunction getPallete(height) {\n  const snowLine = 3;\n  if (height <= .2 * snowLine) {\n    return PALLETES.WATER\n  } else if (height <= .3 * snowLine) {\n    return PALLETES.SAND\n  } else if (height <= .6 * snowLine) {\n    return PALLETES.FOLIAGE\n  } else if (height <= snowLine) {\n    return PALLETES.ROCK\n  } else {\n    return PALLETES.SNOW\n  };\n}\n\n// Responsible for rendering landscape.\nconst Scape = (props) => {\n  const cells = [];\n  for (let x = 0; x < props.scapeMap.length; x++) {\n    for (let z = 0; z < props.scapeMap[0].length; z++) {\n      const boxName = x + \"-\" + z;\n      cells.push(<Box\n        key={boxName}\n        boxName={boxName}\n        dimensions={{\n          x: props.cellSize,\n          y: props.cellSize,\n          z: props.cellSize,\n        }}\n        coordinates={{\n          x: x * props.cellSize,\n          y: props.scapeMap[x][z] * props.cellSize,\n          z: z * props.cellSize,\n        }}\n        handleClick={() => props.handleClick(boxName)}\n        pallete={getPallete(props.scapeMap[x][z])}\n      />);\n    }\n  }\n\n  return (\n    <div\n      className=\"scape object\"\n      style={{\n        marginLeft: (-props.scapeMap.length * props.cellSize / 2) + \"px\",\n        marginTop: (-props.scapeMap[0].length * props.cellSize / 2) + \"px\",\n        transform: \"rotateX(-27deg)\"\n      }}\n    >\n      {cells}\n      <Box\n        className=\"base\"\n        dimensions={{\n          x: props.scapeMap.length * props.cellSize,\n          y: props.cellSize,\n          z: props.scapeMap[0].length * props.cellSize,\n        }}\n        coordinates={{\n          x: 0,\n          y: -props.cellSize * 1.5,\n          z: 0,\n        }}\n        pallete={PALLETES.BASE}\n      />\n    </div>\n  )\n}\n\nexport default Scape;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Scape from \"./Scape\";\n\nconst INIT = {\n  X_CELLS: 20,\n  Z_CELLS: 20,\n  CELL_SIZE: 20,\n  CLICK_MEMORY: 5,\n  UPDATE_INTERVAL: 100,\n}\n\n// Responsible for landscape interactivity.\nconst ScapeManager = (props) => {\n  const [clickLog, setClickLog] = useState([\n    [5, 6, Date.now()],\n    [5, 6, Date.now()],\n    [14, 14, Date.now() + 500],\n    [16, 4, Date.now() + 1000],\n  ]);\n\n  const [scapeMap, setScapeMap] = useState(\n    new Array(INIT.X_CELLS).fill(0).map(() => new Array(INIT.Z_CELLS).fill(0))\n  );\n\n  const handleClick = (boxName) => {\n    const click = [\n      parseInt(boxName.split(\"-\")[0]),\n      parseInt(boxName.split(\"-\")[1]),\n      Date.now(),\n    ];\n    setClickLog(clickLog.concat([click]));\n  }\n\n  // Calculates the desired height for each cell.\n  // Each cell is calculated individually, based on its distance from the locations of recent clicks.\n  // useCallback is used to return a memoized function, as updateScapeMap would otherwise re-calculate each render cycle.\n  const updateScapeMap = useCallback(() => {\n    const newScapeMap = new Array(INIT.X_CELLS).fill(0).map(() => new Array(INIT.Z_CELLS).fill(0));\n    for (let x = 0; x < newScapeMap.length; x++) {\n      for (let z = 0; z < newScapeMap[0].length; z++) {\n\n        // For each click, add to the current cell's height.\n        for (let i = 0; (i < INIT.CLICK_MEMORY) && (i < clickLog.length); i++) {\n          const click = clickLog[clickLog.length - 1 - i];\n          const seconds = (Date.now() - click[2]) / 1000;\n          const distance = Math.pow((Math.pow(x - click[0], 2) + Math.pow(z - click[1], 2)), 1 / 2);\n\n          // If the current click is both close enough and recent enough, add an amount to the cell's height\n          // corresponding to its position on a 2D cosine curve which started out centered on the clicked\n          // cell and has since moved toward (and past) the current cell.\n          if (Math.abs(distance / 2 - seconds) < Math.PI) {\n            newScapeMap[x][z] += (Math.cos(distance / 2 - seconds) + 1) / 2;\n          }\n        };\n      };\n    };\n    setScapeMap(newScapeMap);\n  }, [clickLog]);\n\n\n  // Create a reference to updateScapeMap that can be used within setInterval.\n  const updateScapeMapRef = useRef(updateScapeMap);\n\n  // Update this reference each time updateScapeMap changes.\n  useEffect(() => {\n    updateScapeMapRef.current = updateScapeMap;\n  }, [updateScapeMap]);\n\n  // Create an update loop at the start of this component's lifecycle.\n  useEffect(() => {\n    const updateTimer = setInterval(() => {\n      updateScapeMapRef.current();\n    }, INIT.UPDATE_INTERVAL);\n    return () => {\n      clearInterval(updateTimer);\n    };\n  }, []);\n\n  return (\n    <Scape\n      cellSize={INIT.CELL_SIZE}\n      handleClick={(boxName) => handleClick(boxName)}\n      scapeMap={scapeMap}\n    />\n  )\n}\n\nexport default ScapeManager;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Background from \"./Background\";\nimport ScapeManager from \"./ScapeManager\";\nimport \"./index.css\";\n\nReactDOM.render((\n  <React.Fragment>\n    <Background />\n    <ScapeManager />,\n  </React.Fragment>\n), document.getElementById(\"root\"));\n"],"sourceRoot":""}