{"version":3,"sources":["index.js"],"names":["Background","props","className","Face","transformString","translate","x","y","z","rotate","shade","style","width","height","marginLeft","marginTop","transform","backgroundColor","color","Box","boxName","onClick","handleClick","pallete","light","dimensions","coordinates","medium","Scape","dark","cells","this","map","length","push","cellSize","getPallete","React","Component","Manager","xCells","zCells","state","clickLog","Date","now","Array","fill","memory","updateTimer","undefined","updateInterval","click","parseInt","split","setState","concat","console","log","i","seconds","distance","Math","pow","abs","PI","cos","setInterval","updateMap","clearInterval","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.12469a47.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Background(props) {\n  return (\n    <div className=\"stripe\">\n      <div className=\"logo\">ZS</div>\n      <div className=\"guide\">[click]</div>\n    </div>\n  )\n}\n\n// Constructs an object face.\nfunction Face(props) {\n  const transformString = `translate3d(${props.translate.x}px, ${props.translate.y}px, ${props.translate.z}px)`\n    + ` rotateX(${props.rotate.x}deg) rotateY(${props.rotate.y}deg) rotateZ(${props.rotate.z}deg)`;\n  return (\n    <div\n      className={`${props.shade} face object`}\n      style={{\n        width: props.width,\n        height: props.height,\n        marginLeft: -props.width/2,\n        marginTop: -props.height/2,\n        transform: transformString,\n        backgroundColor: props.color,\n      }}\n    ></div>\n  )\n}\n\n// Constructs a box object.\n// Some faces commented to reduce latency.\nfunction Box(props) {\n  return (\n    <div\n      className={`${props.boxName} box object`}\n      onClick={props.handleClick}\n    >\n      {/* orthogonal to y axis (y points down) */}\n      <Face\n        color={props.pallete.light}\n        width={props.dimensions.x}\n        height={props.dimensions.z}\n        translate={{x: (props.coordinates.x+props.dimensions.x/2), y: -(props.coordinates.y+props.dimensions.y), z: (props.coordinates.z+props.dimensions.z/2)}}\n        rotate={{x: 90, y: 0, z: 0}}\n      />\n      {/* <Face\n        color={props.pallete.dark}\n        width={props.dimensions.x}\n        height={props.dimensions.z}\n        translate={{x: (props.coordinates.x+props.dimensions.x/2), y: -(props.coordinates.y), z: (props.coordinates.z+props.dimensions.z/2)}}\n        rotate={{x: 90, y: 0, z: 0}}\n      /> */}\n\n      {/* orthogonal to z axis (z points out at screen) */}\n      <Face\n        color={props.pallete.medium}\n        width={props.dimensions.x}\n        height={props.dimensions.y}\n        translate={{x: (props.coordinates.x+props.dimensions.x/2), y: -(props.coordinates.y+props.dimensions.y/2), z: (props.coordinates.z+props.dimensions.z)}}\n        rotate={{x: 0, y: 0, z: 0}}\n      />\n      {/* <Face\n        color={props.pallete.medium}\n        width={props.dimensions.x}\n        height={props.dimensions.y}\n        translate={{x: (props.coordinates.x+props.dimensions.x/2), y: -(props.coordinates.y+props.dimensions.y/2), z: (props.coordinates.z)}}\n        rotate={{x: 0, y: 0, z: 0}}\n      /> */}\n\n      {/* orthogonal to x axis (x points to the right) */}\n      {/* <Face\n        color={props.pallete.light}\n        width={props.dimensions.z}\n        height={props.dimensions.y}\n        translate={{x: (props.coordinates.x+props.dimensions.x), y: -(props.coordinates.y+props.dimensions.y/2), z: (props.coordinates.z+props.dimensions.z/2)}}\n        rotate={{x: 0, y: 90, z: 0}}\n      /> */}\n      {/* <Face\n        color={props.pallete.dark}\n        width={props.dimensions.z}\n        height={props.dimensions.y}\n        translate={{x: (props.coordinates.x), y: -(props.coordinates.y+props.dimensions.y/2), z: (props.coordinates.z+props.dimensions.z/2)}}\n        rotate={{x: 0, y: 90, z: 0}}\n      /> */}\n    </div>\n  )\n}\n\n// Responsible for rendering landscape.\nclass Scape extends React.Component {\n  getPallete(height) {\n    const snowLine = 3;\n    if (height <= .2*snowLine) { // water\n      return {\n        light: \"#4081f2\",\n        medium: \"#346dc7\",\n        dark: \"#275799\",\n      }\n    } else if (height <= .3*snowLine) { // sand\n      return {\n        light: \"#FFF089\",\n        medium: \"#C1B367\",\n        dark: \"#817847\",\n      }\n    } else if (height <= .6*snowLine) { // foliage\n      return {\n        light: \"#2aa330\",\n        medium: \"#1f8c28\",\n        dark: \"#106e1f\",\n      }\n    } else if (height <= snowLine) { // rock\n      return {\n        light: \"#BEBEBE\",\n        medium: \"#8E8E8E\",\n        dark: \"#606060\",\n      }\n    } else { // snow\n      return {\n        light: \"#FFFFFF\",\n        medium: \"#BEBEBE\",\n        dark: \"#7F7F7F\",\n      }\n    };\n  }\n\n  render() {\n    const cells = [];\n    for (let x=0; x<this.props.map.length; x++) {\n      for (let z=0; z<this.props.map[0].length; z++) {\n        const boxName = x + \"-\" + z;\n        cells.push(<Box\n          key={boxName}\n          boxName={boxName}\n          dimensions={{\n            x: this.props.cellSize,\n            y: this.props.cellSize,\n            z: this.props.cellSize,\n          }}\n          coordinates={{\n            x: x*this.props.cellSize,\n            y: this.props.map[x][z]*this.props.cellSize,\n            z: z*this.props.cellSize,\n          }}\n          handleClick={() => this.props.handleClick(boxName)}\n          pallete={this.getPallete(this.props.map[x][z])}\n        />);\n      }\n    }\n\n    return (\n      <div\n        className=\"scape object\"\n        style={{\n          marginLeft: (-this.props.map.length*this.props.cellSize/2) + \"px\",\n          marginTop: (-this.props.map[0].length*this.props.cellSize/2) + \"px\",      \n          transform: \"rotateX(-27deg)\"\n        }}\n      >\n        {cells}\n        <Box\n          className=\"base\"\n          dimensions={{\n            x: this.props.map.length*this.props.cellSize,\n            y: this.props.cellSize,\n            z: this.props.map[0].length*this.props.cellSize,\n          }}\n          coordinates={{\n            x: 0,\n            y: -this.props.cellSize*1.5,\n            z: 0,\n          }}\n          pallete={{\n            light: \"#9e9c9c\",\n            medium: \"#807f7e\",\n            dark: \"#4f4e4e\",\n          }}\n        />\n      </div>\n    )\n  }\n}\n\n// Responsible for landscape interactivity.\nclass Manager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.xCells = 20;\n    this.zCells = 20;\n    this.cellSize = 20;\n    this.state = {\n      clickLog: [\n        [5, 6, Date.now()],\n        [5, 6, Date.now()],\n        [14, 14, Date.now()+500],\n        [16, 4, Date.now()+1000],\n      ],\n      map: new Array(this.xCells).fill(0).map(() => new Array(this.zCells).fill(0)),\n    };\n    this.memory = 5;\n    this.updateTimer = undefined;\n    this.updateInterval = 100;\n  }\n\n  handleClick(boxName) {\n    const click = [\n      parseInt(boxName.split(\"-\")[0]),\n      parseInt(boxName.split(\"-\")[1]),\n      Date.now(),\n    ];\n    this.setState({\n      clickLog: this.state.clickLog.concat([click]),\n    });\n    console.log(this.state.clickLog);\n  }\n\n  updateMap() {\n    const map = new Array(this.xCells).fill(0).map(() => new Array(this.zCells).fill(0));\n    for (let x=0; x<map.length; x++) {\n      for (let z=0; z<map[0].length; z++) {\n        for (let i = 0; (i < this.memory) && (i < this.state.clickLog.length); i++) {\n          const click = this.state.clickLog[this.state.clickLog.length-1-i];\n          const seconds = (Date.now() - click[2])/1000;\n          const distance = Math.pow((Math.pow(x-click[0], 2)+Math.pow(z-click[1], 2)), 1/2);\n          if (Math.abs(distance/2 - seconds) < Math.PI) {\n            map[x][z] += (Math.cos(distance/2 - seconds) + 1)/2;\n          }\n        };\n      };\n    };\n    this.setState({\n      map: map,\n    });\n  }\n\n  componentDidMount() {\n    this.updateTimer = setInterval(()=>{\n      this.updateMap();\n    }, this.updateInterval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateTimer);\n  }\n\n  render() {\n    return (\n      <Scape \n        cellSize={this.cellSize}\n        handleClick={(boxName)=>this.handleClick(boxName)}\n        map={this.state.map}\n      />\n    )\n  }\n}\n\nReactDOM.render((\n  <React.Fragment>\n    <Background />\n    <Manager />,\n  </React.Fragment>\n), document.getElementById(\"root\"));\n"],"sourceRoot":""}