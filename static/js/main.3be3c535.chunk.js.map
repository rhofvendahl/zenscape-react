{"version":3,"sources":["components/Stripe.js","components/Controls.js","components/Face.js","components/Box.js","components/Scape.js","components/ScapeManager.js","components/App.js","index.js"],"names":["Stripe","props","className","onClick","toggleControls","Controls","onSizeChange","onHeightChange","onWidthChange","onSpeedChange","sizeValue","waveValues","resetControls","onChange","value","height","width","speed","Face","translate","rotate","backgroundColor","transform","x","y","z","style","marginLeft","marginTop","Box","boxName","handleClick","pallete","dimensions","coordinates","onMouseDown","light","medium","PALLETES","WATER","dark","SAND","FOLIAGE","ROCK","SNOW","BASE","Scape","scapeMap","cellSize","cells","length","push","top","ScapeManager","xCells","zCells","clickMemory","updateInterval","wave","useState","Date","now","clickLog","setClickLog","Array","fill","map","setScapeMap","updateScapeMap","useCallback","newScapeMap","i","click","seconds","distance","Math","pow","distanceFromPeak","abs","PI","cos","updateScapeMapRef","useRef","useEffect","current","updateTimer","setInterval","clearInterval","parseInt","split","concat","INIT","App","setXCells","setZCells","setCellSize","waveHeight","setWaveHeight","waveWidth","setWaveWidth","waveSpeed","setWaveSpeed","controlsHidden","setControlsHidden","controlsRemoved","setControlsRemoved","controlsHiddenRef","prevControlsHidden","setTimeout","toggleControlsRef","round","minWaveHeight","waveHeightValue","minWaveWidth","waveWidthValue","minWaveSpeed","waveSpeedValue","getControlsClassName","newXCellsFloat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3be3c535.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Stripe.css\";\n\nconst Stripe = (props) => {\n  return (\n    <div\n      className=\"stripe\"\n      onClick={() => props.toggleControls()}\n    >\n      <div className=\"stripe-contents\">  \n        <div className=\"logo\">ZS</div>\n        <button className=\"controls-toggle\">[controls]</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Stripe;","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport 'rc-slider/assets/index.css';\nimport \"./Controls.css\";\n\nconst Controls = ({ className, onSizeChange, onHeightChange, onWidthChange, onSpeedChange, sizeValue, waveValues, resetControls }) => {\n  return (\n    <div\n      className={className}\n    >\n      <div className=\"controls-contents\">\n        <div className=\"control control-size\">\n          <div className=\"control-label\">size</div>\n          <Slider\n            onChange={onSizeChange}\n            value={sizeValue}\n          />\n        </div>\n        <div className=\"control control-height\">\n          <div className=\"control-label\">height</div>\n          <Slider\n            onChange={onHeightChange}\n            value={waveValues.height}\n          />\n        </div>\n        <div className=\"control control-width\">\n          <div className=\"control-label\">width</div>\n          <Slider\n            onChange={onWidthChange}\n            value={waveValues.width}\n          />\n        </div>\n        <div className=\"control control-speed\">\n          <div className=\"control-label\">speed</div>\n          <Slider\n            onChange={onSpeedChange}\n            value={waveValues.speed}\n          />\n        </div>\n        <div className=\"controls-reset\"\n          onClick={()=>resetControls()}\n        >\n          [reset]\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","// Constructs a box face.\nconst Face = ({translate, rotate, width, height, backgroundColor}) => {\n  const transform = `translate3d(${translate.x}px, ${translate.y}px, ${translate.z}px)`\n    + ` rotateX(${rotate.x}deg) rotateY(${rotate.y}deg) rotateZ(${rotate.z}deg)`;\n\n  return (\n    <div\n      className=\"face object\"\n      style={{\n        width,\n        height,\n        marginLeft: -width/2,\n        marginTop: -height/2,\n        transform,\n        backgroundColor,\n      }}\n    ></div>\n  );\n};\n\nexport default Face;","import Face from \"./Face\";\n\n// Constructs a box object.\nconst Box = ({boxName, handleClick, pallete, dimensions, coordinates}) => {\n  return (\n    <div\n      className={`${boxName} box object`}\n      onMouseDown={handleClick}\n    >\n      {/* orthogonal to y axis (y points down) */}\n      <Face\n        backgroundColor={pallete.light}\n        width={dimensions.x}\n        height={dimensions.z}\n        translate={{ x: (coordinates.x + dimensions.x / 2), y: -(coordinates.y + dimensions.y), z: (coordinates.z + dimensions.z / 2) }}\n        rotate={{ x: 90, y: 0, z: 0 }}\n      />\n\n      {/* orthogonal to z axis (z points out at screen) */}\n      <Face\n        backgroundColor={pallete.medium}\n        width={dimensions.x}\n        height={dimensions.y}\n        translate={{ x: (coordinates.x + dimensions.x / 2), y: -(coordinates.y + dimensions.y / 2), z: (coordinates.z + dimensions.z) }}\n        rotate={{ x: 0, y: 0, z: 0 }}\n      />\n    </div>\n  );\n};\n\nexport default Box;","import React from \"react\";\nimport Box from \"./Box\";\n\nconst PALLETES = {\n  WATER: {\n    light: \"#4081F2\",\n    medium: \"#346dC7\",\n    dark: \"#275799\",\n  },\n  SAND: {\n    light: \"#FFF089\",\n    medium: \"#C1B367\",\n    dark: \"#817847\",\n  },\n  FOLIAGE: {\n    light: \"#2AA330\",\n    medium: \"#1F8C28\",\n    dark: \"#106E1F\",\n  },\n  ROCK: {\n    light: \"#BEBEBE\",\n    medium: \"#8E8E8E\",\n    dark: \"#606060\",\n  },\n  SNOW: {\n    light: \"#FFFFFF\",\n    medium: \"#BEBEBE\",\n    dark: \"#7F7F7F\",\n  },\n  BASE: {\n    // light: \"#9e9c9c\",\n    // medium: \"#807f7e\",\n    // dark: \"#4f4e4e\",\n    light: \"#9D9D9D\",\n    medium: \"#7F7F7F\",\n    dark: \"#4E4E4E\",\n  },\n};\n\nconst getPallete = (height) => {\n  const snowLine = 3;\n  if (height <= .2 * snowLine) {\n    return PALLETES.WATER\n  } else if (height <= .3 * snowLine) {\n    return PALLETES.SAND\n  } else if (height <= .6 * snowLine) {\n    return PALLETES.FOLIAGE\n  } else if (height <= snowLine) {\n    return PALLETES.ROCK\n  } else {\n    return PALLETES.SNOW\n  };\n};\n\n// Responsible for rendering landscape.\nconst Scape = ({scapeMap, cellSize, handleClick}) => { \n  const cells = [];\n  for (let x = 0; x < scapeMap.length; x++) {\n    for (let z = 0; z < scapeMap[0].length; z++) {\n      const boxName = x + \"-\" + z;\n      cells.push(<Box\n        key={boxName}\n        boxName={boxName}\n        dimensions={{\n          x: cellSize,\n          y: cellSize,\n          z: cellSize,\n        }}\n        coordinates={{\n          x: x * cellSize,\n          y: scapeMap[x][z] * cellSize,\n          z: z * cellSize,\n        }}\n        handleClick={() => handleClick(boxName)}\n        pallete={getPallete(scapeMap[x][z])}\n      />);\n    }\n  }\n\n  return (\n    <div\n      className=\"scape object\"\n      style={{\n        marginLeft: (-scapeMap.length * cellSize / 2) + \"px\",\n        marginTop: (-scapeMap[0].length * cellSize / 2) + \"px\",\n        transform: \"rotateX(-30deg)\",\n        top: \"50%\",\n      }}\n    >\n      {cells}\n      <Box\n        className=\"base\"\n        dimensions={{\n          x: scapeMap.length * cellSize,\n          y: cellSize,\n          z: scapeMap[0].length * cellSize,\n        }}\n        coordinates={{\n          x: 0,\n          y: -cellSize * 1.5,\n          z: 0,\n        }}\n        pallete={PALLETES.BASE}\n      />\n    </div>\n  );\n};\n\nexport default Scape;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Scape from \"./Scape\";\nimport \"./ScapeManager.css\";\n\n// Responsible for landscape interactivity.\nconst ScapeManager = ({xCells, zCells, cellSize, clickMemory, updateInterval, wave }) => {\n  const [clickLog, setClickLog] = useState([\n    [5, 6, Date.now()],\n    [5, 6, Date.now()],\n    [14, 14, Date.now() + 500],\n    [16, 4, Date.now() + 1000],\n  ]);\n\n  const [scapeMap, setScapeMap] = useState(\n    new Array(xCells).fill(0).map(() => new Array(zCells).fill(0))\n  );\n\n  const handleClick = (boxName) => {\n    const click = [\n      parseInt(boxName.split(\"-\")[0]),\n      parseInt(boxName.split(\"-\")[1]),\n      Date.now(),\n    ];\n    setClickLog(clickLog.concat([click]));\n  }\n\n  // Calculates the desired height for each cell.\n  // Each cell is calculated individually, based on its distance from the locations of recent clicks.\n  // useCallback is used to return a memoized function, as updateScapeMap would otherwise re-calculate each render cycle.\n  const updateScapeMap = useCallback(() => {\n    const newScapeMap = new Array(xCells).fill(0).map(() => new Array(zCells).fill(0));\n    for (let x = 0; x < newScapeMap.length; x++) {\n      for (let z = 0; z < newScapeMap[0].length; z++) {\n\n        // For each click, add to the current cell's height.\n        for (let i = 0; (i < clickMemory) && (i < clickLog.length); i++) {\n          const click = clickLog[clickLog.length - 1 - i];\n          const seconds = (Date.now() - click[2]) / 1000;\n          const distance = Math.pow((Math.pow(x - click[0], 2) + Math.pow(z - click[1], 2)), 1 / 2);\n\n          // If the current click is both close enough and recent enough, add an amount to the cell's height\n          // corresponding to its position on a 2D cosine curve which started out centered on the clicked\n          // cell and has since moved toward (and past) the current cell.\n          const distanceFromPeak = Math.abs(distance / 2 - (seconds * wave.speed)) / wave.width;\n          if (distanceFromPeak < Math.PI) {\n            newScapeMap[x][z] += (Math.cos(distanceFromPeak) + 1) / 2 * wave.height;\n          }\n        };\n      };\n    };\n    setScapeMap(newScapeMap);\n  }, [clickMemory, clickLog, xCells, zCells, wave]);\n\n  // Create a reference to updateScapeMap that can be used within setInterval.\n  const updateScapeMapRef = useRef(updateScapeMap);\n\n  // Update this reference each time updateScapeMap or changes.\n  useEffect(() => {\n    updateScapeMapRef.current = updateScapeMap;\n  }, [updateScapeMap, xCells, zCells]);\n\n  // Create an update loop at the start of this component's lifecycle.\n  useEffect(() => {\n    const updateTimer = setInterval(() => {\n      updateScapeMapRef.current();\n    }, updateInterval);\n    return () => {\n      clearInterval(updateTimer);\n    };\n  }, [updateInterval]);\n\n\n  return (\n    <div className=\"scape-manager\" >\n      <Scape\n        cellSize={cellSize}\n        handleClick={(boxName) => handleClick(boxName)}\n        scapeMap={scapeMap}\n      />\n    </div>\n  );\n};\n\nexport default ScapeManager;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Stripe from \"./Stripe\";\nimport Controls from \"./Controls\";\nimport ScapeManager from \"./ScapeManager\";\nimport \"./App.css\";\n\nconst INIT = {\n  X_CELLS: 20,\n  Z_CELLS: 20,\n  CELL_SIZE: 20,\n  CLICK_MEMORY: 5,\n  UPDATE_INTERVAL: 100,\n  WAVE_HEIGHT: 1,\n  WAVE_WIDTH: 1,\n  WAVE_SPEED: 1,\n};\n\n// Manages interactions between landscape and controls\nconst App = () => {\n  const [xCells, setXCells] = useState(INIT.X_CELLS);\n  const [zCells, setZCells] = useState(INIT.Z_CELLS);\n  const [cellSize, setCellSize] = useState(INIT.CELL_SIZE);\n  const [clickMemory, setClickMemory] = useState(INIT.CLICK_MEMORY);\n  const [updateInterval, setUpdateInterval] = useState(INIT.UPDATE_INTERVAL);\n  const [waveHeight, setWaveHeight] = useState(INIT.WAVE_HEIGHT);\n  const [waveWidth, setWaveWidth] = useState(INIT.WAVE_WIDTH);\n  const [waveSpeed, setWaveSpeed] = useState(INIT.WAVE_SPEED);\n  \n  const [controlsHidden, setControlsHidden] = useState(null);\n\n  // Indicates whether controls \"visibility\" set to \"none\" (occurs at end of \"hide\" animation)\n  const [controlsRemoved, setControlsRemoved] = useState(false);\n\n  // Ensures timeout has current value for controlsHidden\n  const controlsHiddenRef = useRef(controlsHidden);\n  useEffect(() => {\n    controlsHiddenRef.current = controlsHidden;\n  }, [controlsHidden]);\n\n  const toggleControls = useCallback(() => {\n    let prevControlsHidden = controlsHidden;\n    // Sets to true if either false (visible) or null (initial state)\n    setControlsHidden(!prevControlsHidden);\n    if (prevControlsHidden) {\n      setControlsRemoved(false);\n    }\n    else {\n      setTimeout(() => {\n        if (controlsHiddenRef.current) {\n          setControlsRemoved(true);\n        }\n      }, 1000);  \n    }\n  }, [controlsHidden]);\n\n  const getControlsClassName = () => {\n    let className = \"controls\";\n    if (controlsRemoved) {\n      return className + \" controls-removed\";\n    } else if (controlsHidden == null) {\n      return className + \" controls-initial\";\n    } else if (controlsHidden) {\n      return className + \" controls-hidden\";\n    } else {\n      return className;\n    }\n  };\n\n  // Ensures timeout has current value for toggleControls\n  const toggleControlsRef = useRef(toggleControls);\n  useEffect(() => {\n    toggleControlsRef.current = toggleControls;\n  }, [toggleControls]);  \n\n  useEffect(() => {\n    setTimeout(() => {\n      if (controlsHiddenRef.current == null) {\n        toggleControlsRef.current();\n      }\n    }, 2000);\n  }, []);\n\n  const resetControls = () => {\n    setXCells(INIT.X_CELLS);\n    setZCells(INIT.Z_CELLS);\n    setCellSize(INIT.CELL_SIZE);\n    setWaveHeight(INIT.WAVE_HEIGHT);\n    setWaveWidth(INIT.WAVE_WIDTH);\n    setWaveSpeed(INIT.WAVE_SPEED);\n  };\n\n  const minXCells = 10;\n  const maxXCells = 40;\n  const onSizeChange = (value) => {\n    const ratio = value / 100.0;\n    const newXCellsFloat = minXCells + (maxXCells-minXCells)*ratio;\n    setCellSize(Math.round(400 / newXCellsFloat));\n    setXCells(Math.round(newXCellsFloat));\n    setZCells(Math.round(newXCellsFloat));\n  };\n  const sizeValue = Math.round((xCells-minXCells) / (maxXCells-minXCells) * 100);\n\n  const minWaveHeight = .25;\n  const maxWaveHeight = 2;\n  const onHeightChange = (value) => {\n    const ratio = value / 100.0;\n    setWaveHeight(minWaveHeight + (maxWaveHeight-minWaveHeight)*ratio);\n  };\n  const waveHeightValue = Math.round((waveHeight-minWaveHeight) / (maxWaveHeight-minWaveHeight) * 100);\n\n  const minWaveWidth = .5;\n  const maxWaveWidth = 2;\n  const onWidthChange = (value) => {\n    const ratio = value / 100.0;\n    setWaveWidth(minWaveWidth + (maxWaveWidth-minWaveWidth)*ratio);\n  };\n  const waveWidthValue = Math.round((waveWidth-minWaveWidth) / (maxWaveWidth-minWaveWidth) * 100);\n\n  const minWaveSpeed = .1;\n  const maxWaveSpeed = 10;\n  const onSpeedChange = (value) => {\n    const ratio = value / 100.0;\n    setWaveSpeed(minWaveSpeed + (maxWaveSpeed-minWaveSpeed)*ratio);\n  };\n  const waveSpeedValue = Math.round((waveSpeed-minWaveSpeed) / (maxWaveSpeed-minWaveSpeed) * 100);\n\n  return (\n    <div className=\"app\">\n      <div className=\"viewport\">\n        <Stripe\n          toggleControls={toggleControls}\n        />\n        <ScapeManager\n          xCells={xCells}\n          zCells={zCells}\n          cellSize={cellSize}\n          clickMemory={clickMemory}\n          updateInterval={updateInterval}\n          wave={{\n            height: waveHeight,\n            width: waveWidth,\n            speed: waveSpeed,\n          }}\n        />\n        <div className=\"guide-wrapper\">\n          <div className=\"guide\">^ click scape ^</div>\n        </div>\n      </div>\n      <Controls\n        className={getControlsClassName()}\n        onSizeChange={onSizeChange}\n        onHeightChange={onHeightChange}\n        onWidthChange={onWidthChange}\n        onSpeedChange={onSpeedChange}\n        sizeValue={sizeValue}\n        waveValues={{\n          height: waveHeightValue,\n          width: waveWidthValue,\n          speed: waveSpeedValue,\n        }}\n        resetControls={resetControls}\n      />\n    </div>\n  );\n};\n\nexport default App;","import ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render((\n  <App />\n), document.getElementById(\"root\"));\n\n"],"sourceRoot":""}