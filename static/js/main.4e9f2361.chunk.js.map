{"version":3,"sources":["components/Stripe.js","components/Controls.js","components/Face.js","components/Box.js","components/Scape.js","components/ScapeManager.js","components/App.js","index.js"],"names":["Stripe","props","className","onClick","toggleControls","Controls","handlers","values","limits","reset","onChange","onSizeChange","value","size","step","min","SIZE","MIN","max","MAX","onHeightChange","height","HEIGHT","onWidthChange","width","WIDTH","onSpeedChange","speed","SPEED","Face","translate","rotate","backgroundColor","borderRadius","transform","x","y","z","style","marginLeft","marginTop","Box","boxName","handleClick","pallete","dimensions","coordinates","roundCorners","borderRadiusValue","onMouseDown","light","backTopLeft","backTopRight","medium","frontBottomRight","frontBottomLeft","PALLETES","WATER","dark","SAND","FOLIAGE","ROCK","SNOW","BASE","Scape","scapeMap","cellSize","cells","length","push","top","ScapeManager","xCells","zCells","clickMemory","updateInterval","wave","useState","Date","now","clickLog","setClickLog","Array","fill","map","setScapeMap","updateScapeMap","useCallback","newScapeMap","i","click","seconds","distance","Math","pow","distanceFromPeak","abs","PI","cos","updateScapeMapRef","useRef","useEffect","current","updateTimer","setInterval","clearInterval","parseInt","split","concat","INIT","CONTROLS_LIMITS","App","setXCells","setZCells","setCellSize","waveHeight","setWaveHeight","waveWidth","setWaveWidth","waveSpeed","setWaveSpeed","controlsHidden","setControlsHidden","controlsRemoved","setControlsRemoved","controlsHiddenRef","prevControlsHidden","setTimeout","toggleControlsRef","controlsHandlers","newXCellsFloat","round","newHeight","newWidth","newSpeed","getControlsClassName","ReactDOM","render","document","getElementById"],"mappings":"wRAiBeA,EAdA,SAACC,GACd,OACE,qBAAKC,UAAU,SAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,cAAf,gBACA,wBACEA,UAAU,kBACVC,QAAS,kBAAMF,EAAMG,kBAFvB,8B,OCqDOC,G,YAxDE,SAAC,GAAoD,IAAlDH,EAAiD,EAAjDA,UAAWI,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACvD,OACE,qBACEP,UAAWA,EADb,SAGE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,gBAAf,kBACA,cAAC,IAAD,CACEQ,SAAUJ,EAASK,aACnBC,MAAOL,EAAOM,KACdC,KAAM,IACNC,IAAKP,EAAOQ,KAAKC,IACjBC,IAAKV,EAAOQ,KAAKG,SAGrB,sBAAKjB,UAAU,yBAAf,UACE,qBAAKA,UAAU,gBAAf,oBACA,cAAC,IAAD,CACEQ,SAAUJ,EAASc,eACnBR,MAAOL,EAAOc,OACdP,KAAM,IACNC,IAAKP,EAAOc,OAAOL,IACnBC,IAAKV,EAAOc,OAAOH,SAGvB,sBAAKjB,UAAU,wBAAf,UACE,qBAAKA,UAAU,gBAAf,mBACA,cAAC,IAAD,CACEQ,SAAUJ,EAASiB,cACnBX,MAAOL,EAAOiB,MACdV,KAAM,IACNC,IAAKP,EAAOiB,MAAMR,IAClBC,IAAKV,EAAOiB,MAAMN,SAGtB,sBAAKjB,UAAU,wBAAf,UACE,qBAAKA,UAAU,gBAAf,mBACA,cAAC,IAAD,CACEQ,SAAUJ,EAASoB,cACnBd,MAAOL,EAAOoB,MACdb,KAAM,IACNC,IAAKP,EAAOoB,MAAMX,IAClBC,IAAKV,EAAOoB,MAAMT,SAGtB,qBAAKjB,UAAU,iBACbC,QAAS,kBAAIM,KADf,4BC9BOoB,EApBF,SAAC,GAAuE,IAAtEC,EAAqE,EAArEA,UAAWC,EAA0D,EAA1DA,OAAQP,EAAkD,EAAlDA,MAAOH,EAA2C,EAA3CA,OAAQW,EAAmC,EAAnCA,gBAAiBC,EAAkB,EAAlBA,aAC1DC,EAAY,sBAAeJ,EAAUK,EAAzB,eAAiCL,EAAUM,EAA3C,eAAmDN,EAAUO,EAA7D,0BACFN,EAAOI,EADL,wBACsBJ,EAAOK,EAD7B,wBAC8CL,EAAOM,EADrD,QAGlB,OACE,qBACEnC,UAAU,cACVoC,MAAO,CACLd,QACAH,SACAkB,YAAaf,EAAM,EACnBgB,WAAYnB,EAAO,EACnBa,YACAF,kBACAC,mBCkBOQ,EA9BH,SAAC,GAA4E,IAA3EC,EAA0E,EAA1EA,QAASC,EAAiE,EAAjEA,YAAaC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC9DC,EAAoBH,EAAWT,EAAI,EAAI,KAC7C,OACE,sBACElC,UAAS,UAAKwC,EAAL,eACTO,YAAaN,EAFf,UAKE,cAAC,EAAD,CACEX,gBAAiBY,EAAQM,MACzB1B,MAAOqB,EAAWV,EAClBd,OAAQwB,EAAWR,EACnBP,UAAW,CAAEK,EAAIW,EAAYX,EAAIU,EAAWV,EAAI,EAAIC,IAAKU,EAAYV,EAAIS,EAAWT,GAAIC,EAAIS,EAAYT,EAAIQ,EAAWR,EAAI,GAC3HN,OAAQ,CAAEI,EAAG,GAAIC,EAAG,EAAGC,EAAG,GAC1BJ,aAAY,UAAKc,EAAaI,YAAcH,EAAoB,IAApD,YAA2DD,EAAaK,aAAeJ,EAAoB,IAA3G,UAId,cAAC,EAAD,CACEhB,gBAAiBY,EAAQS,OACzB7B,MAAOqB,EAAWV,EAClBd,OAAQwB,EAAWT,EACnBN,UAAW,CAAEK,EAAIW,EAAYX,EAAIU,EAAWV,EAAI,EAAIC,IAAKU,EAAYV,EAAIS,EAAWT,EAAI,GAAIC,EAAIS,EAAYT,EAAIQ,EAAWR,GAC3HN,OAAQ,CAAEI,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACzBJ,aAAY,cAASc,EAAaO,iBAAmBN,EAAoB,IAA7D,YAAoED,EAAaQ,gBAAkBP,EAAoB,WCxBrIQ,EAAW,CACfC,MAAO,CACLP,MAAO,UACPG,OAAQ,UACRK,KAAM,WAERC,KAAM,CACJT,MAAO,UACPG,OAAQ,UACRK,KAAM,WAERE,QAAS,CACPV,MAAO,UACPG,OAAQ,UACRK,KAAM,WAERG,KAAM,CACJX,MAAO,UACPG,OAAQ,UACRK,KAAM,WAERI,KAAM,CACJZ,MAAO,UACPG,OAAQ,UACRK,KAAM,WAERK,KAAM,CAIJb,MAAO,UACPG,OAAQ,UACRK,KAAM,YAsFKM,EAlED,SAAC,GAEb,IAFoD,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAAUvB,EAAiB,EAAjBA,YAC5BwB,EAAQ,GACLhC,EAAI,EAAGA,EAAI8B,EAASG,OAAQjC,IACnC,IADyC,IAAD,WAC/BE,GACP,IApBchB,EAoBRqB,EAAUP,EAAI,IAAME,EACpBU,EAAe,CACnBI,YAAmB,GAALhB,GAAe,GAALE,GAAW4B,EAAS9B,GAAGE,GAC/Ce,aAAejB,GAAK8B,EAASG,OAAS,GAAU,GAAL/B,GAAW4B,EAAS9B,GAAGE,GAClEkB,gBAAuB,GAALpB,GAAUE,GAAK4B,EAAS,GAAGG,OAAS,GAAMH,EAAS9B,GAAGE,GACxEiB,iBAAmBnB,GAAK8B,EAASG,OAAS,GAAK/B,GAAK4B,EAAS,GAAGG,OAAS,GAAMH,EAAS9B,GAAGE,IAE7F8B,EAAME,KAAK,cAAC,EAAD,CAET3B,QAASA,EACTG,WAAY,CACVV,EAAG+B,EACH9B,EAAG8B,EACH7B,EAAG6B,GAELpB,YAAa,CACXX,EAAGA,EAAI+B,EACP9B,EAAG6B,EAAS9B,GAAGE,GAAK6B,EACpB7B,EAAGA,EAAI6B,GAETvB,YAAa,kBAAMA,EAAYD,IAC/BE,SAzCYvB,EAyCQ4C,EAAS9B,GAAGE,GAvClChB,GAAU,GADG,EAERmC,EAASC,MACPpC,GAAU,GAHJ,EAIRmC,EAASG,KACPtC,GAAU,GALJ,EAMRmC,EAASI,QACPvC,GAPM,EAQRmC,EAASK,KAETL,EAASM,MA+BZf,aAAcA,GAdTL,KATAL,EAAI,EAAGA,EAAI4B,EAAS,GAAGG,OAAQ/B,IAAM,EAArCA,GA4BX,OACE,sBACEnC,UAAU,eACVoC,MAAO,CACLC,YAAc0B,EAASG,OAASF,EAAW,EAAK,KAChD1B,WAAayB,EAAS,GAAGG,OAASF,EAAW,EAAK,KAClDhC,UAAW,kBACXoC,IAAK,OANT,UASGH,EACD,cAAC,EAAD,CACEjE,UAAU,OACV2C,WAAY,CACVV,EAAG8B,EAASG,OAASF,EACrB9B,EAAG8B,EACH7B,EAAG4B,EAAS,GAAGG,OAASF,GAE1BpB,YAAa,CACXX,EAAG,EACHC,EAAe,KAAX8B,EACJ7B,EAAG,GAELO,QAASY,EAASO,KAClBhB,aAAc,CACVI,aAAa,EACbC,cAAc,EACdG,iBAAiB,EACjBD,kBAAkB,SC/BfiB,G,MA9EM,SAAC,GAAoE,IAAnEC,EAAkE,EAAlEA,OAAQC,EAA0D,EAA1DA,OAAQP,EAAkD,EAAlDA,SAAUQ,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,eAAgBC,EAAW,EAAXA,KAAW,EACvDC,mBAAS,CACvC,CAAC,EAAG,EAAGC,KAAKC,OACZ,CAAC,EAAG,EAAGD,KAAKC,OACZ,CAAC,GAAI,GAAID,KAAKC,MAAQ,KACtB,CAAC,GAAI,EAAGD,KAAKC,MAAQ,OALgE,mBAChFC,EADgF,KACtEC,EADsE,OAQvDJ,mBAC9B,IAAIK,MAAMV,GAAQW,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMT,GAAQU,KAAK,OAT0B,mBAQhFlB,EARgF,KAQtEoB,EARsE,KAwBjFC,EAAiBC,uBAAY,WAEjC,IADA,IAAMC,EAAc,IAAIN,MAAMV,GAAQW,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMT,GAAQU,KAAK,MACtEhD,EAAI,EAAGA,EAAIqD,EAAYpB,OAAQjC,IACtC,IAAK,IAAIE,EAAI,EAAGA,EAAImD,EAAY,GAAGpB,OAAQ/B,IAGzC,IAAK,IAAIoD,EAAI,EAAIA,EAAIf,GAAiBe,EAAIT,EAASZ,OAASqB,IAAK,CAC/D,IAAMC,EAAQV,EAASA,EAASZ,OAAS,EAAIqB,GACvCE,GAAWb,KAAKC,MAAQW,EAAM,IAAM,IACpCE,EAAWC,KAAKC,IAAKD,KAAKC,IAAI3D,EAAIuD,EAAM,GAAI,GAAKG,KAAKC,IAAIzD,EAAIqD,EAAM,GAAI,GAAK,IAK7EK,EAAmBF,KAAKG,IAAIJ,EAAW,EAAKD,EAAUf,EAAKjD,OAAUiD,EAAKpD,MAC5EuE,EAAmBF,KAAKI,KAC1BT,EAAYrD,GAAGE,KAAOwD,KAAKK,IAAIH,GAAoB,GAAK,EAAInB,EAAKvD,QAKzEgE,EAAYG,KACX,CAACd,EAAaM,EAAUR,EAAQC,EAAQG,IAGrCuB,EAAoBC,iBAAOd,GAkBjC,OAfAe,qBAAU,WACRF,EAAkBG,QAAUhB,IAC3B,CAACA,EAAgBd,EAAQC,IAG5B4B,qBAAU,WACR,IAAME,EAAcC,aAAY,WAC9BL,EAAkBG,YACjB3B,GACH,OAAO,WACL8B,cAAcF,MAEf,CAAC5B,IAIF,qBAAKzE,UAAU,gBAAf,SACE,cAAC,EAAD,CACEgE,SAAUA,EACVvB,YAAa,SAACD,GAAD,OA3DC,SAACA,GACnB,IAAMgD,EAAQ,CACZgB,SAAShE,EAAQiE,MAAM,KAAK,IAC5BD,SAAShE,EAAQiE,MAAM,KAAK,IAC5B7B,KAAKC,OAEPE,EAAYD,EAAS4B,OAAO,CAAClB,KAqDC/C,CAAYD,IACtCuB,SAAUA,QCvEZ4C,G,MACK,IADLA,EAEK,GAFLA,EAGO,GAHPA,EAIU,EAJVA,EAKa,IALbA,EAMS,EANTA,EAOQ,EAPRA,EAQQ,EAGRC,EAAkB,CACtB9F,KAAM,CACJC,IAAK,GACLE,IAAK,IAEPG,OAAQ,CACNL,IAAK,IACLE,IAAK,GAEPM,MAAO,CACLR,IAAK,GACLE,IAAK,GAEPS,MAAO,CACLX,IAAK,GACLE,IAAK,KAoIM4F,EA/HH,WAAO,IAAD,EACYlC,mBAASgC,GADrB,mBACTrC,EADS,KACDwC,EADC,OAEYnC,mBAASgC,GAFrB,mBAETpC,EAFS,KAEDwC,EAFC,OAGgBpC,mBAASgC,GAHzB,mBAGT3C,EAHS,KAGCgD,EAHD,OAIsBrC,mBAASgC,GAJ/B,mBAITnC,EAJS,aAK4BG,mBAASgC,IALrC,mBAKTlC,EALS,aAMoBE,mBAASgC,IAN7B,mBAMTM,EANS,KAMGC,EANH,OAOkBvC,mBAASgC,GAP3B,mBAOTQ,EAPS,KAOEC,EAPF,OAQkBzC,mBAASgC,GAR3B,mBAQTU,EARS,KAQEC,EARF,OAS4B3C,mBAAS,MATrC,mBAST4C,EATS,KASOC,EATP,OAW8B7C,oBAAS,GAXvC,mBAWT8C,EAXS,KAWQC,EAXR,KAeVC,EAAoBzB,iBAAOqB,GACjCpB,qBAAU,WACRwB,EAAkBvB,QAAUmB,IAC3B,CAACA,IAEJ,IAAMrH,GAAiBmF,uBAAY,WACjC,IAAIuC,EAAqBL,EAEzBC,GAAmBI,GACfA,EACFF,GAAmB,GAGnBG,YAAW,WACLF,EAAkBvB,SACpBsB,GAAmB,KAEpB,OAEJ,CAACH,IAgBEO,GAAoB5B,iBAAOhG,IACjCiG,qBAAU,WACR2B,GAAkB1B,QAAUlG,KAC3B,CAACA,KAEJiG,qBAAU,WACR0B,YAAW,WACwB,MAA7BF,EAAkBvB,SACpB0B,GAAkB1B,YAEnB,OACF,IAEH,IASM2B,GAAmB,CACvBtH,aAAc,SAACuH,GACbhB,EAAYrB,KAAKsC,MAAM,IAAMD,IAC7BlB,EAAUnB,KAAKsC,MAAMD,IACrBjB,EAAUpB,KAAKsC,MAAMD,KAEvB9G,eAAgB,SAACgH,GACfhB,EAAcgB,IAEhB7G,cAAe,SAAC8G,GACdf,EAAae,IAEf3G,cAAe,SAAC4G,GACdd,EAAac,KAIjB,OACE,sBAAKpI,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,cAAC,EAAD,CACEE,eAAgBA,KAElB,cAAC,EAAD,CACEoE,OAAQA,EACRC,OAAQA,EACRP,SAAUA,EACVQ,YAAaA,EACbC,eAAgBA,EAChBC,KAAM,CACJvD,OAAQ8F,EACR3F,MAAO6F,EACP1F,MAAO4F,KAGX,qBAAKrH,UAAU,gBAAf,SACE,qBAAKA,UAAU,QAAf,kCAGJ,cAAC,EAAD,CACEA,UA5EuB,WAC3B,IAAIA,EAAY,WAChB,OAAIyH,EACKzH,4BACoB,MAAlBuH,EACFvH,4BACEuH,EACFvH,2BAEAA,EAmEMqI,GACXjI,SAAU2H,GACV1H,OAAQ,CACNM,KAAM2D,EACNnD,OAAQ8F,EACR3F,MAAO6F,EACP1F,MAAO4F,GAET/G,OAAQsG,EACRrG,MA1DgB,WACpBuG,EAAUH,GACVI,EAAUJ,GACVK,EAAYL,GACZO,EAAcP,GACdS,EAAaT,GACbW,EAAaX,U,MCtGjB2B,IAASC,OACP,cAAC,EAAD,IACCC,SAASC,eAAe,W","file":"static/js/main.4e9f2361.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Stripe.css\";\n\nconst Stripe = (props) => {\n  return (\n    <div className=\"stripe\">\n      <div className=\"stripe-contents\">  \n        <div className=\"stripe-logo\">ZS</div>\n        <button\n          className=\"controls-toggle\"\n          onClick={() => props.toggleControls()}\n        >[controls]</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Stripe;","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport 'rc-slider/assets/index.css';\nimport \"./Controls.css\";\n\nconst Controls = ({ className, handlers, values, limits, reset }) => {\n  return (\n    <div\n      className={className}\n    >\n      <div className=\"controls-contents\">\n        <div className=\"control control-size\">\n          <div className=\"control-label\">size</div>\n          <Slider\n            onChange={handlers.onSizeChange}\n            value={values.size}\n            step={.01}\n            min={limits.SIZE.MIN}\n            max={limits.SIZE.MAX}\n          />\n        </div>\n        <div className=\"control control-height\">\n          <div className=\"control-label\">height</div>\n          <Slider\n            onChange={handlers.onHeightChange}\n            value={values.height}\n            step={.01}\n            min={limits.HEIGHT.MIN}\n            max={limits.HEIGHT.MAX}\n          />\n        </div>\n        <div className=\"control control-width\">\n          <div className=\"control-label\">width</div>\n          <Slider\n            onChange={handlers.onWidthChange}\n            value={values.width}\n            step={.01}\n            min={limits.WIDTH.MIN}\n            max={limits.WIDTH.MAX}\n          />\n        </div>\n        <div className=\"control control-speed\">\n          <div className=\"control-label\">speed</div>\n          <Slider\n            onChange={handlers.onSpeedChange}\n            value={values.speed}\n            step={.01}\n            min={limits.SPEED.MIN}\n            max={limits.SPEED.MAX}\n          />\n        </div>\n        <div className=\"controls-reset\"\n          onClick={()=>reset()}\n        >\n          [reset]\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","// Constructs a box face.\nconst Face = ({translate, rotate, width, height, backgroundColor, borderRadius}) => {\n  const transform = `translate3d(${translate.x}px, ${translate.y}px, ${translate.z}px)`\n    + ` rotateX(${rotate.x}deg) rotateY(${rotate.y}deg) rotateZ(${rotate.z}deg)`;\n\n  return (\n    <div\n      className=\"face object\"\n      style={{\n        width,\n        height,\n        marginLeft: -width/2,\n        marginTop: -height/2,\n        transform,\n        backgroundColor,\n        borderRadius,\n      }}\n    ></div>\n  );\n};\n\nexport default Face;","import Face from \"./Face\";\n\n// Constructs a box object.\nconst Box = ({boxName, handleClick, pallete, dimensions, coordinates, roundCorners}) => {\n  const borderRadiusValue = dimensions.y / 8 + \"px\";\n  return (\n    <div\n      className={`${boxName} box object`}\n      onMouseDown={handleClick}\n    >\n      {/* Top */}\n      <Face\n        backgroundColor={pallete.light}\n        width={dimensions.x}\n        height={dimensions.z}\n        translate={{ x: (coordinates.x + dimensions.x / 2), y: -(coordinates.y + dimensions.y), z: (coordinates.z + dimensions.z / 2) }}\n        rotate={{ x: 90, y: 0, z: 0 }}\n        borderRadius={`${roundCorners.backTopLeft ? borderRadiusValue : \"0\"} ${roundCorners.backTopRight ? borderRadiusValue : \"0\"} 0 0`}\n      />\n\n      {/* Front */}\n      <Face\n        backgroundColor={pallete.medium}\n        width={dimensions.x}\n        height={dimensions.y}\n        translate={{ x: (coordinates.x + dimensions.x / 2), y: -(coordinates.y + dimensions.y / 2), z: (coordinates.z + dimensions.z) }}\n        rotate={{ x: 0, y: 0, z: 0 }}\n        borderRadius={`0 0 ${roundCorners.frontBottomRight ? borderRadiusValue : \"0\"} ${roundCorners.frontBottomLeft ? borderRadiusValue : \"0\"}`}\n      />\n    </div>\n  );\n};\n\nexport default Box;","import React from \"react\";\nimport Box from \"./Box\";\n\nconst PALLETES = {\n  WATER: {\n    light: \"#4081F2\",\n    medium: \"#346dC7\",\n    dark: \"#275799\",\n  },\n  SAND: {\n    light: \"#FFF089\",\n    medium: \"#C1B367\",\n    dark: \"#817847\",\n  },\n  FOLIAGE: {\n    light: \"#2AA330\",\n    medium: \"#1F8C28\",\n    dark: \"#106E1F\",\n  },\n  ROCK: {\n    light: \"#BEBEBE\",\n    medium: \"#8E8E8E\",\n    dark: \"#606060\",\n  },\n  SNOW: {\n    light: \"#FFFFFF\",\n    medium: \"#BEBEBE\",\n    dark: \"#7F7F7F\",\n  },\n  BASE: {\n    // light: \"#9e9c9c\",\n    // medium: \"#807f7e\",\n    // dark: \"#4f4e4e\",\n    light: \"#9D9D9D\",\n    medium: \"#7F7F7F\",\n    dark: \"#4E4E4E\",\n  },\n};\n\nconst getPallete = (height) => {\n  const snowLine = 3;\n  if (height <= .2 * snowLine) {\n    return PALLETES.WATER\n  } else if (height <= .3 * snowLine) {\n    return PALLETES.SAND\n  } else if (height <= .6 * snowLine) {\n    return PALLETES.FOLIAGE\n  } else if (height <= snowLine) {\n    return PALLETES.ROCK\n  } else {\n    return PALLETES.SNOW\n  };\n};\n\n// Responsible for rendering landscape.\nconst Scape = ({scapeMap, cellSize, handleClick}) => { \n  const cells = [];\n  for (let x = 0; x < scapeMap.length; x++) {\n    for (let z = 0; z < scapeMap[0].length; z++) {\n      const boxName = x + \"-\" + z;\n      const roundCorners = {\n        backTopLeft: (x == 0 && z == 0) || scapeMap[x][z],\n        backTopRight: (x == scapeMap.length - 1 && z == 0) || scapeMap[x][z],\n        frontBottomLeft: (x == 0 && z == scapeMap[0].length - 1) || scapeMap[x][z],\n        frontBottomRight: (x == scapeMap.length - 1 && z == scapeMap[0].length - 1) || scapeMap[x][z],\n      };\n      cells.push(<Box\n        key={boxName}\n        boxName={boxName}\n        dimensions={{\n          x: cellSize,\n          y: cellSize,\n          z: cellSize,\n        }}\n        coordinates={{\n          x: x * cellSize,\n          y: scapeMap[x][z] * cellSize,\n          z: z * cellSize,\n        }}\n        handleClick={() => handleClick(boxName)}\n        pallete={getPallete(scapeMap[x][z])}\n        roundCorners={roundCorners}\n      />);\n    }\n  }\n\n  return (\n    <div\n      className=\"scape object\"\n      style={{\n        marginLeft: (-scapeMap.length * cellSize / 2) + \"px\",\n        marginTop: (-scapeMap[0].length * cellSize / 2) + \"px\",\n        transform: \"rotateX(-30deg)\",\n        top: \"50%\",\n      }}\n    >\n      {cells}\n      <Box\n        className=\"base\"\n        dimensions={{\n          x: scapeMap.length * cellSize,\n          y: cellSize,\n          z: scapeMap[0].length * cellSize,\n        }}\n        coordinates={{\n          x: 0,\n          y: -cellSize * 1.5,\n          z: 0,\n        }}\n        pallete={PALLETES.BASE}\n        roundCorners={{\n            backTopLeft: true,\n            backTopRight: true,\n            frontBottomLeft: true,\n            frontBottomRight: true,    \n        }}\n      />\n    </div>\n  );\n};\n\nexport default Scape;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Scape from \"./Scape\";\nimport \"./ScapeManager.css\";\n\n// Responsible for landscape interactivity.\nconst ScapeManager = ({xCells, zCells, cellSize, clickMemory, updateInterval, wave }) => {\n  const [clickLog, setClickLog] = useState([\n    [5, 6, Date.now()],\n    [5, 6, Date.now()],\n    [14, 14, Date.now() + 500],\n    [16, 4, Date.now() + 1000],\n  ]);\n\n  const [scapeMap, setScapeMap] = useState(\n    new Array(xCells).fill(0).map(() => new Array(zCells).fill(0))\n  );\n\n  const handleClick = (boxName) => {\n    const click = [\n      parseInt(boxName.split(\"-\")[0]),\n      parseInt(boxName.split(\"-\")[1]),\n      Date.now(),\n    ];\n    setClickLog(clickLog.concat([click]));\n  }\n\n  // Calculates the desired height for each cell.\n  // Each cell is calculated individually, based on its distance from the locations of recent clicks.\n  // useCallback is used to return a memoized function, as updateScapeMap would otherwise re-calculate each render cycle.\n  const updateScapeMap = useCallback(() => {\n    const newScapeMap = new Array(xCells).fill(0).map(() => new Array(zCells).fill(0));\n    for (let x = 0; x < newScapeMap.length; x++) {\n      for (let z = 0; z < newScapeMap[0].length; z++) {\n\n        // For each click, add to the current cell's height.\n        for (let i = 0; (i < clickMemory) && (i < clickLog.length); i++) {\n          const click = clickLog[clickLog.length - 1 - i];\n          const seconds = (Date.now() - click[2]) / 1000;\n          const distance = Math.pow((Math.pow(x - click[0], 2) + Math.pow(z - click[1], 2)), 1 / 2);\n\n          // If the current click is both close enough and recent enough, add an amount to the cell's height\n          // corresponding to its position on a 2D cosine curve which started out centered on the clicked\n          // cell and has since moved toward (and past) the current cell.\n          const distanceFromPeak = Math.abs(distance / 2 - (seconds * wave.speed)) / wave.width;\n          if (distanceFromPeak < Math.PI) {\n            newScapeMap[x][z] += (Math.cos(distanceFromPeak) + 1) / 2 * wave.height;\n          }\n        };\n      };\n    };\n    setScapeMap(newScapeMap);\n  }, [clickMemory, clickLog, xCells, zCells, wave]);\n\n  // Create a reference to updateScapeMap that can be used within setInterval.\n  const updateScapeMapRef = useRef(updateScapeMap);\n\n  // Update this reference each time updateScapeMap or changes.\n  useEffect(() => {\n    updateScapeMapRef.current = updateScapeMap;\n  }, [updateScapeMap, xCells, zCells]);\n\n  // Create an update loop at the start of this component's lifecycle.\n  useEffect(() => {\n    const updateTimer = setInterval(() => {\n      updateScapeMapRef.current();\n    }, updateInterval);\n    return () => {\n      clearInterval(updateTimer);\n    };\n  }, [updateInterval]);\n\n\n  return (\n    <div className=\"scape-manager\" >\n      <Scape\n        cellSize={cellSize}\n        handleClick={(boxName) => handleClick(boxName)}\n        scapeMap={scapeMap}\n      />\n    </div>\n  );\n};\n\nexport default ScapeManager;","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Stripe from \"./Stripe\";\nimport Controls from \"./Controls\";\nimport ScapeManager from \"./ScapeManager\";\nimport \"./App.css\";\n\nconst INIT = {\n  X_CELLS: 20,\n  Z_CELLS: 20,\n  CELL_SIZE: 20,\n  CLICK_MEMORY: 5,\n  UPDATE_INTERVAL: 100,\n  WAVE_HEIGHT: 1,\n  WAVE_WIDTH: 1,\n  WAVE_SPEED: 1,\n};\n\nconst CONTROLS_LIMITS = {\n  SIZE: {\n    MIN: 10,\n    MAX: 40,\n  },\n  HEIGHT: {\n    MIN: .25,\n    MAX: 2,\n  },\n  WIDTH: {\n    MIN: .5,\n    MAX: 2,\n  },\n  SPEED: {\n    MIN: .1,\n    MAX: 10,\n  },\n}\n\n// Manages interactions between landscape and controls\nconst App = () => {\n  const [xCells, setXCells] = useState(INIT.X_CELLS);\n  const [zCells, setZCells] = useState(INIT.Z_CELLS);\n  const [cellSize, setCellSize] = useState(INIT.CELL_SIZE);\n  const [clickMemory, setClickMemory] = useState(INIT.CLICK_MEMORY);\n  const [updateInterval, setUpdateInterval] = useState(INIT.UPDATE_INTERVAL);\n  const [waveHeight, setWaveHeight] = useState(INIT.WAVE_HEIGHT);\n  const [waveWidth, setWaveWidth] = useState(INIT.WAVE_WIDTH);\n  const [waveSpeed, setWaveSpeed] = useState(INIT.WAVE_SPEED);\n  const [controlsHidden, setControlsHidden] = useState(null);\n  // Indicates whether controls \"visibility\" set to \"none\" (occurs at end of \"hide\" animation)\n  const [controlsRemoved, setControlsRemoved] = useState(false);\n\n\n  // Ensures timeout has current value for controlsHidden\n  const controlsHiddenRef = useRef(controlsHidden);\n  useEffect(() => {\n    controlsHiddenRef.current = controlsHidden;\n  }, [controlsHidden]);\n\n  const toggleControls = useCallback(() => {\n    let prevControlsHidden = controlsHidden;\n    // Sets to true if either false (visible) or null (initial state)\n    setControlsHidden(!prevControlsHidden);\n    if (prevControlsHidden) {\n      setControlsRemoved(false);\n    }\n    else {\n      setTimeout(() => {\n        if (controlsHiddenRef.current) {\n          setControlsRemoved(true);\n        }\n      }, 1000);  \n    }\n  }, [controlsHidden]);\n\n  const getControlsClassName = () => {\n    let className = \"controls\";\n    if (controlsRemoved) {\n      return className + \" controls-removed\";\n    } else if (controlsHidden == null) {\n      return className + \" controls-initial\";\n    } else if (controlsHidden) {\n      return className + \" controls-hidden\";\n    } else {\n      return className;\n    }\n  };\n\n  // Ensures timeout has current value for toggleControls\n  const toggleControlsRef = useRef(toggleControls);\n  useEffect(() => {\n    toggleControlsRef.current = toggleControls;\n  }, [toggleControls]);  \n  \n  useEffect(() => {\n    setTimeout(() => {\n      if (controlsHiddenRef.current == null) {\n        toggleControlsRef.current();\n      }\n    }, 2000);\n  }, []);\n\n  const resetControls = () => {\n    setXCells(INIT.X_CELLS);\n    setZCells(INIT.Z_CELLS);\n    setCellSize(INIT.CELL_SIZE);\n    setWaveHeight(INIT.WAVE_HEIGHT);\n    setWaveWidth(INIT.WAVE_WIDTH);\n    setWaveSpeed(INIT.WAVE_SPEED);\n  };\n\n  const controlsHandlers = {\n    onSizeChange: (newXCellsFloat) => {\n      setCellSize(Math.round(400 / newXCellsFloat));\n      setXCells(Math.round(newXCellsFloat));\n      setZCells(Math.round(newXCellsFloat));\n    },\n    onHeightChange: (newHeight) => {\n      setWaveHeight(newHeight);\n    },\n    onWidthChange: (newWidth) => {\n      setWaveWidth(newWidth);\n    },\n    onSpeedChange: (newSpeed) => {\n      setWaveSpeed(newSpeed);\n    },\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"viewport\">\n        <Stripe\n          toggleControls={toggleControls}\n        />\n        <ScapeManager\n          xCells={xCells}\n          zCells={zCells}\n          cellSize={cellSize}\n          clickMemory={clickMemory}\n          updateInterval={updateInterval}\n          wave={{\n            height: waveHeight,\n            width: waveWidth,\n            speed: waveSpeed,\n          }}\n        />\n        <div className=\"guide-wrapper\">\n          <div className=\"guide\">^ click scape ^</div>\n        </div>\n      </div>\n      <Controls\n        className={getControlsClassName()}\n        handlers={controlsHandlers}\n        values={{\n          size: xCells,\n          height: waveHeight,\n          width: waveWidth,\n          speed: waveSpeed,\n        }}\n        limits={CONTROLS_LIMITS}\n        reset={resetControls}\n      />\n    </div>\n  );\n};\n\nexport default App;","import ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render((\n  <App />\n), document.getElementById(\"root\"));\n\n"],"sourceRoot":""}